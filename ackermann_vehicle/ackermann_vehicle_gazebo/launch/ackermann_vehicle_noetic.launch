<?xml version="1.0"?>

<launch>
  <arg name="mapping_mode"  default="gmapping" doc="opt: gmapping, hector,cartographer,karto"/>
  <arg name="namespace" default="/"/>
  <arg name="cmd_timeout" default="0.5"/>
  <arg name="world_name" default="$(find ackermann_vehicle_gazebo)/worlds/depth_cam_test/depth_test.world"/>

  <!-- Vehicle pose -->
  <arg name="x" default="-2.0"/>
  <arg name="y" default="-2.0"/>
  <arg name="z" default="1.2"/>
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw" default="0.0"/>
  <arg name="rviz" default="/home/timtu/catkin_ws/src/ackermann_vehicle/ackermann_vehicle_gazebo/worlds/default.rviz"/>

  <include file="$(find ackermann_vehicle_description)/launch/ackermann_vehicle.launch">
    <arg name="namespace" value="$(arg namespace)"/>
  </include>

  <!-- depth_to laser. -->
  <include file="$(find depthimage_to_laserscan)/launch/launchfile_sample.launch">
  </include>

  <group ns="$(arg namespace)">
    <!-- Create the world. -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="world_name" value="$(arg world_name)"/>
    </include>

    <!-- Spawn the vehicle. -->
    <node name="spawn_vehicle" pkg="gazebo_ros" type="spawn_model"
          args="-urdf -param robot_description -model ackermann_vehicle
                -gazebo_namespace /$(arg namespace)/gazebo
                -x $(arg x) -y $(arg y) -z $(arg z)
                -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"/>

    <node name="controller_spawner" pkg="controller_manager" type="spawner"
          args="$(find ackermann_vehicle_gazebo)/config/em_3905_joint_ctrlr_params.yaml"/>

    <node name="ackermann_controller" pkg="ackermann_vehicle_gazebo"
          type="ackermann_controller">
      <param name="cmd_timeout" value="$(arg cmd_timeout)"/>
      <rosparam file="$(find ackermann_vehicle_gazebo)/config/em_3905_ackermann_ctrlr_params.yaml" command="load"/>
    </node>

    <node name="connect_cmd" pkg="ackermann_vehicle_navigation" type="cmd_vel_to_ackermann_drive.py" output="screen">
    </node>

    <param name="rviz" value="$(arg rviz)"/>
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rviz)" respawn="false" output="screen"/>
    <!-- <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" /> -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="base_to_chassis" args="0.00 0.00 0.0 0 0 0  base_to_chassis chassis 100" /> -->

  </group>


  <node pkg="tf" type="static_transform_publisher" name="base_to_link" args="0 0 0.05 0 0 0 base_footprint base_link 100" />
  
  <node name="odom" pkg="ackermann_vehicle_gazebo" type="odom_pub" output="screen">
  </node>

  <!-- <node pkg="world_canvas_msgs" type="save" name="save_map" /> -->

  <!-- 读取urdf信息(robot_description) 发布话题：/joint_states-->
  <!-- <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" /> -->
  <!-- 订阅话题：/joint_states，发布小车TF信息-->
  <!-- <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" /> -->
   <!-- turn on ekf 扩张卡尔曼滤波 发布map到footprint的TF,即小车定位-->
  <!-- <include file="$(find ackermann_vehicle_gazebo)/launch/robot_pose_ekf.launch" /> -->

  <group if="$(eval mapping_mode == 'gmapping')">
    <include file="$(find ackermann_vehicle_gazebo)/launch/algorithm_gmapping.launch" /> 
  </group>

</launch>